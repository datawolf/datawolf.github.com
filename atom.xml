<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Linux Primer]]></title>
  <link href="http://datawolf.github.com/atom.xml" rel="self"/>
  <link href="http://datawolf.github.com/"/>
  <updated>2015-06-14T17:24:30+08:00</updated>
  <id>http://datawolf.github.com/</id>
  <author>
    <name><![CDATA[datawolf]]></name>
    <email><![CDATA[datawolf@laoqinren.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sys Rq in linux kernel]]></title>
    <link href="http://datawolf.github.com/blog/2015/03/21/sys-rq-in-linux-kernel/"/>
    <updated>2015-03-21T16:57:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2015/03/21/sys-rq-in-linux-kernel</id>
    <content type="html"><![CDATA[<p>曾几何时，笔者在使用ubuntu系统时，内核卡死，然后就束手无策了。只能去把电源来重启系统，但这是非常危险的，有可能会造成数据的丢失或者磁盘的损害。</p>

<p>幸好，使用sysrq组合键可以让系统安全的进行重启，并能收集一些系统的信息，方便问题的定位。</p>

<p>在终端上同时按Alt, SysRq和命令键则会执行SysRq命令, SysRq键就是&#8221;Print Screen&#8221;健. 比如Alt+SysRq+b则重启机器。ALT+SysRQ+X（此处X代表命令参数）这是一组“魔术组合键”，只要内核没有被完全锁住，不管内核在做什么事情，使用这些组合键能即时打印出内核的信息。</p>

<p>使用sysrq组合键是了解系统目前运行情况的最佳方式。如果系统出现挂起（例如：死机等）的情况或在诊断一些和内核相关比较难解决的问题的时候，使用sysrq键是个比较好的方式。</p>

<p>在有些系统中，默认SysRq组合键是关闭的。 打开这个功能，运行:</p>

<pre><code># echo 1 &gt; /proc/sys/kernel/sysrq
</code></pre>

<p>关闭这个功能:</p>

<pre><code># echo 0 &gt; /proc/sys/kernel/sysrq
</code></pre>

<p>如果想让此功能一直生效，在/etc/sysctl.conf里面设置kernel.sysrq的值为1. 重新启动以后，此功能将会自动打开。</p>

<pre><code>kernel.sysrq = 1
</code></pre>

<p>因为打开sysrq键的功能以后，有终端访问权限的用户将会拥有一些特别的功能。因此，除非是要调试，解决问题，一般情况下，不要打开此功能。如果一定要打开，请确保你的终端访问的安全性。</p>

<p>有几种方式能触发sysrq事件。在带有AT键盘的一般系统上，在终端上输入一下组合键:</p>

<pre><code>Alt+PrintScreen+[CommandKey]
</code></pre>

<p>如果你在机器上有root权限，你能把commandkey字符写入到 <code>/proc/sysrq-trigger</code> 文件。这能帮助你通过脚本或你不在系统终端上的时候触发sysrq事件。</p>

<pre><code># echo 'm' &gt; /proc/sysrq-trigger
</code></pre>

<p>哪些类型的sysrq事件能被触发？请参见文档：https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain/Documentation/sysrq.txt</p>

<h2>下面具体介绍一些如何安全的重启卡死的linux系统</h2>

<h4>使用 SysRq 重启计算机的方法：</h4>

<p>台式机键盘或者全尺寸键盘： <code>Alt + SysRq + [R-E-I-S-U-B]</code></p>

<p>部分笔记本键盘： <code>Fn + Alt + SysRq + [R-E-I-S-U-B]</code></p>

<p>解释：括号内的英文字母需要依次顺序按下，而且每次按下字母后需要间隔 5-10s 再执行下一个动作。（如 <code>alter +SysRq + R</code>，间隔10s 后再按 alter+ SysRq +E，以此类推）切记不可快速按下 <code>R-E-I-S-U-B</code> ，否则后果和 扣电池拔电源线无异！</p>

<h4>下面详细讲解一下各个序列：</h4>

<ul>
<li><code>unRaw</code> – 把键盘设置为 ASCII 模式，使按键可以穿透 x server 捕捉传递给内核</li>
<li><code>tErminate</code> – 向除 init 外进程发送 SIGTERM 信号，让其自行结束</li>
<li><code>kIll</code> - 向除 init 以外所有进程发送 SIGKILL 信号，强制结束进程</li>
<li><code>Sync</code> – 同步缓冲区数据到硬盘，避免数据丢失</li>
<li><code>Unmount</code> – 将所有已经挂载的文件系统 重新挂载为只读</li>
<li><code>reBoot</code> - 立即重启计算机</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to build linux kernel in ubuntu faster?]]></title>
    <link href="http://datawolf.github.com/blog/2015/02/13/how-to-build-linux-kernel-in-ubuntu-faster/"/>
    <updated>2015-02-13T22:39:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2015/02/13/how-to-build-linux-kernel-in-ubuntu-faster</id>
    <content type="html"><![CDATA[<h2>传统编译方式</h2>

<p>通常，我们要需要编译linux内核，大概要经历以下几个步骤：</p>

<h3>配置内核</h3>

<p>make menuconfig</p>

<h3>编译内核和模块</h3>

<p>依次执行如下命令：</p>

<p>make
make modules
make modules_install
make install</p>

<h2>使用make-kpkg</h2>

<p>如果是ubuntu的用户，可以使用make-kpkg简化这个流程，而且还能带来额外的好处。
在ubuntu下，安装kernel-package这个包之后，就可以使用make-kpkg了。</p>

<p>sudo apt-get install kernel-package</p>

<p>使用make-kpkg编译内核，第一个步骤“配置内核是必不可少的”，在这里，我比较建议在发行版默认的config的基础上再进行配置，这样配置出来的内核和发行版本身具有更好的相容性。比如ubuntu 14.10,可以在运行“make menuconfig”之前执行命令“cp /boot/config-3.13.0-44-generic .config”。</p>

<p>配置完内核后，接下来执行真正的编译过程。通常我们可以执行如下命令：</p>

<p>make-kpkg  &#8211;initrd -j 8 &#8211;append-to-version -20150213001 kernel_image</p>

<ul>
<li>&#8211;initrd选项会让make-kpkg自动帮助我们生成initramfs</li>
<li>&#8211;revisin会让生成的deb文件加上一个版本信息，这个参数只影响到文件名。</li>
<li>&#8211;append-to-version 也是一种版本信息，它不仅会出现在deb安装包的名称中，也会影响到kernel的名称。</li>
<li>kernel_image表示生成内核和默认模块的安装包，另外您也可以加上kernel_headers，这样也会生成一个内核头文件的安装包。</li>
</ul>


<p>编译过程执行完毕之后，会在上层目录里生成一个deb安装包。</p>

<p>使用make-kpkg来编译内核，还有其他好处。因为我们是通过包管理器来安装新的内核，当不再需要这个内核时，就可以简单的通过dpkg命令、新立得软件包管理器或者Ubuntu软件中心来完全卸载，而不需要一个个手动删除修改。</p>

<p>如果需要详细了解make-kpkg的用法，可以查阅manual:
man make-kpkg</p>

<h2>TIPS</h2>

<p>默认的config会编译很多模块，为了尽可能少的编译模块，在配置内核时，可以使用如下命令精简内核模块：</p>

<p>make localmodconfig</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 时钟和定时器]]></title>
    <link href="http://datawolf.github.com/blog/2013/06/01/linux-shi-zhong-he-ding-shi-qi/"/>
    <updated>2013-06-01T19:38:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/06/01/linux-shi-zhong-he-ding-shi-qi</id>
    <content type="html"><![CDATA[<h2>时钟</h2>

<p>时钟这个东西，实际上是作为一种工具而存在，内核通过时钟来感知、管理时间。这里的时钟，更主要的还是<strong>软件上的概念</strong>，系统通过维护软件时钟来追踪时间。</p>

<h3>概念</h3>

<ol>
<li><strong>时钟中断</strong>：由硬件产生的电信号，一切的缘起。该中断产生时，内核通过特殊的中断处理程序进行处理。</li>
<li><strong>节拍率</strong>（tick rate）：系统以某种频率（可编程）自行触发（hitting、popping）时钟中断（即系统定时器的频率）。</li>
<li><strong>节拍</strong>（tick）：由于节拍率已知，系统当然也知道两次时钟中断之间所间隔的时间，这个时间就是时钟节拍。</li>
</ol>


<h3>再说节拍率：HZ</h3>

<p><strong>节拍率</strong>，即系统定时器的频率，在内核中通过<code>HZ</code>这个宏进行定义。在进行内核编程的时候，切记不要假设<code>HZ</code>不会发生变化，事实上，大多数体系结构的HZ都是可调的。</p>

<p><code>HZ</code>的理想取值：从2.5内核开始，这个取值在i386体系结构中就改为了<code>1000</code>（2.6.13版本后的内核，加入了250这个取值）。改变HZ的取值，对于操作系统而言，意味着改变时钟中断的频率：</p>

<p> <strong>增大HZ</strong>：提高时钟中断的频率，这带来的好处是，提高了时间驱动事件的解析度与精确度,内核定时器具有更高的频度与精确度（依赖内核定时器的系统调用也有了更精确的执行度，比如select、epoll等，这会带来很大的性能提升），时间相关的测量会更准确，内核抢占更准确，进程调度的响应更及时。</p>

<p>当然也会有负面影响：更高的中断频率，必然会导致系统消耗更多的资源来处理时钟中断（当然，就目前的主机来说，<code>1000</code>还是一个不错的取值）。</p>

<p>2.6的内核允许在编译的时候，选择不同的HZ取值，用户空间的<code>USER_HZ</code>，是根据内核的<code>HZ</code>进行了相应的转换。</p>

<p>最后顺便说一下，OS也是可以采取无节拍的实现的，但系统的开销会非常大。</p>

<h3>jiffies</h3>

<p>变量类型为<code>unsigned long volatile</code>，该变量记录了系统启动以来，产生的<code>tick</code>总数，<code>系统运行时间 = jiffies/HZ</code> 。</p>

<p>下面是几个典型运用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">timestamp</span> <span class="o">=</span> <span class="n">jiffies</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">nextTick</span> <span class="o">=</span> <span class="n">jiffies</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span> <span class="mi">5</span><span class="n">sLater</span> <span class="o">=</span> <span class="n">jiffies</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="n">HZ</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>作为<code>unsigned long</code>，在64位机上是不会溢出的。而在32位机上，当<code>HZ=1000</code>时，49.7天将发生溢出，会进行所谓的回绕，下面是几个处理回绕的宏(<code>include/linux/jiffies.h</code>)：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> *  These inlines deal with timer wrapping correctly. You are</span>
</span><span class='line'><span class="cm"> *  strongly encouraged to use them</span>
</span><span class='line'><span class="cm"> *  1. Because people otherwise forget</span>
</span><span class='line'><span class="cm"> *  2. Because if the timer wrap changes in future you won&#39;t have to</span>
</span><span class='line'><span class="cm"> * alter your driver code.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * time_after(a,b) returns true if the time a is after time b.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * Do this with &quot;&lt;0&quot; and &quot;&gt;=0&quot; to only test the sign of the result. A</span>
</span><span class='line'><span class="cm"> * good compiler would generate better code (and a really good compiler</span>
</span><span class='line'><span class="cm"> * wouldn&#39;t care). Gcc is currently neither.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define time_after(a,b) \</span>
</span><span class='line'><span class="cp"> (typecheck(unsigned long, a) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  typecheck(unsigned long, b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  ((long)(b) - (long)(a) &lt; 0))</span>
</span><span class='line'><span class="cp">#define time_before(a,b)time_after(b,a)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define time_after_eq(a,b)  \</span>
</span><span class='line'><span class="cp"> (typecheck(unsigned long, a) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  typecheck(unsigned long, b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  ((long)(a) - (long)(b) &gt;= 0))</span>
</span><span class='line'><span class="cp">#define time_before_eq(a,b) time_after_eq(b,a)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Calculate whether a is in the range of [b, c].</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define time_in_range(a,b,c) \</span>
</span><span class='line'><span class="cp"> (time_after_eq(a,b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">     time_before_eq(a,c))</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Calculate whether a is in the range of [b, c).</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define time_in_range_open(a,b,c) \</span>
</span><span class='line'><span class="cp"> (time_after_eq(a,b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  time_before(a,c))</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Same as above, but does so with platform independent 64bit types.</span>
</span><span class='line'><span class="cm"> * These must be used when utilizing jiffies_64 (i.e. return value of</span>
</span><span class='line'><span class="cm"> * get_jiffies_64() */</span>
</span><span class='line'><span class="cp">#define time_after64(a,b)   \</span>
</span><span class='line'><span class="cp"> (typecheck(__u64, a) &amp;&amp; \</span>
</span><span class='line'><span class="cp">     typecheck(__u64, b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">     ((__s64)(b) - (__s64)(a) &lt; 0))</span>
</span><span class='line'><span class="cp">#define time_before64(a,b)  time_after64(b,a)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define time_after_eq64(a,b)\</span>
</span><span class='line'><span class="cp"> (typecheck(__u64, a) &amp;&amp; \</span>
</span><span class='line'><span class="cp">  typecheck(__u64, b) &amp;&amp; \</span>
</span><span class='line'><span class="cp">     ((__s64)(a) - (__s64)(b) &gt;= 0))</span>
</span><span class='line'><span class="cp">#define time_before_eq64(a,b)   time_after_eq64(b,a)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * These four macros compare jiffies and &#39;a&#39; for convenience.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* time_is_before_jiffies(a) return true if a is before jiffies */</span>
</span><span class='line'><span class="cp">#define time_is_before_jiffies(a) time_after(jiffies, a)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* time_is_after_jiffies(a) return true if a is after jiffies */</span>
</span><span class='line'><span class="cp">#define time_is_after_jiffies(a) time_before(jiffies, a)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* time_is_before_eq_jiffies(a) return true if a is before or equal to jiffies*/</span>
</span><span class='line'><span class="cp">#define time_is_before_eq_jiffies(a) time_after_eq(jiffies, a)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* time_is_after_eq_jiffies(a) return true if a is after or equal to jiffies*/</span>
</span><span class='line'><span class="cp">#define time_is_after_eq_jiffies(a) time_before_eq(jiffies, a)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>时间</h2>

<p>讲Linux系统编程的书，都要讲时间以及相关接口，因为这个概念是不可或缺的，许多功能都需要时间进行支撑。</p>

<h3>几个时间</h3>

<ol>
<li><strong>墙上时间</strong>：墙上挂钟的时间，即真是时间。用户级进程一般使用该时间。</li>
<li><strong>进程时间</strong>：进程消耗的时间，包括用户空间的和内核空间的，一般在对程序进行分析、统计的时候使用。</li>
<li><strong>单调时间</strong>：保持稳定线性递增的时间，其重要性不在于绝对值是多少，而在于通过多次采样并计算相对时间。单调时间不会因为墙上时间的改变而受到影响。</li>
</ol>


<p>系统衡量这几个时间的方式有两个：<strong>绝对时间</strong>，<strong>相对时间</strong></p>

<h3>POSIX时钟</h3>

<p><code>POSIX</code>定义了若干种时钟，这些<code>POSIX</code>时钟其实是指的<strong>实现和表示时间源的标准</strong>，Linux支持以下四种：</p>

<p><code>MONOTONIC</code>：不可被设置的，单调增长的时钟</p>

<p><code>PROCESS_CPUTIME_ID</code>：系统为每进程提供的高精度时钟</p>

<p><code>REALTIME</code>：墙上时钟，设置需要root权限  （必须实现的）</p>

<p><code>THREAD_CPUTIME_ID</code>：系统为每线程提供的高精度时钟</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The IDs of the various system clocks (for POSIX.1b interval timers):</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="cp">#define CLOCK_REALTIME                  0</span>
</span><span class='line'><span class="cp">#define CLOCK_MONOTONIC                 1</span>
</span><span class='line'><span class="cp">#define CLOCK_PROCESS_CPUTIME_ID        2</span>
</span><span class='line'><span class="cp">#define CLOCK_THREAD_CPUTIME_ID         3</span>
</span><span class='line'><span class="cp">#define CLOCK_MONOTONIC_RAW             4</span>
</span><span class='line'><span class="cp">#define CLOCK_REALTIME_COARSE           5</span>
</span><span class='line'><span class="cp">#define CLOCK_MONOTONIC_COARSE          6</span>
</span><span class='line'><span class="cp">#define CLOCK_BOOTTIME                  7</span>
</span><span class='line'><span class="cp">#define CLOCK_REALTIME_ALARM            8</span>
</span><span class='line'><span class="cp">#define CLOCK_BOOTTIME_ALARM            9</span>
</span></code></pre></td></tr></table></div></figure>


<h2>延迟执行</h2>

<p>Linux系统提供了许多种让任务延后执行的方法，我们最为熟悉的自然是定时器了，但在细说定时器之前，我们也有必要了解其他的延迟机制。</p>

<h3>忙等待</h3>

<p><strong>忙等待</strong>的原理最简单：通过不断的循环，直到经过了设定的时钟节拍。</p>

<p>下面是其典型示例：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span>  <span class="n">delay</span>  <span class="o">=</span>  <span class="n">jiffies</span> <span class="o">+</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">While</span> <span class="p">(</span><span class="n">time_before</span> <span class="p">(</span><span class="n">jiffies</span> <span class="p">,</span> <span class="n">delay</span> <span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>忙等待唯一的优点就是实现简单了，但是缺点却有一箩筐`精度低、等待时占用CPU资源等。因此我们一般不会在正式的代码中发现它的身影。</p>

<h3>短延迟</h3>

<p>内核提供一种<strong>微秒级</strong>的循环等待机制，其原理是：<strong>内核知道系统每秒能够执行多少次循环，然后通过执行特定次数的循环来达到延时的目的</strong></p>

<p>接口：<code>udelay() / mdelay()</code>  入参均为微秒/毫秒数，并不使用<code>jiffies</code></p>

<p>这里有一个相关变量：<code>BogoMIPS</code> ，该变量记录的是，处理器在给定时间内忙循环执行的次数，主要就是被上述2个接口使用。</p>

<h3>在等待队列上睡眠</h3>

<p>在学习进程的时候，我们已经知道当进程等待某个事件的发生时，是能够将自己挂起的，即将自己加入等待队列中。这就是系统提供的第三种延迟机制。</p>

<p>在学习进程时，我们知道了schedule()，这里对应的会有schedule_timeout()，顾名思义，该调用与时间有关：作用是在等待队列上睡眠指定的时间（精度为节拍）。使用这个机制时，需要首先设置进程状态为<code>TASK_INTERRUPTIBLE</code>(处理信号 )/ <code>TASK_UNINTERRUPTIBLE</code>(不处理信号)，否则进程不会睡眠</p>

<h2>Linux定时器</h2>

<h3>Linux提供的睡眠系统调用——临时定时器</h3>

<p>Linux提供了几个睡眠的系统调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sleep</span><span class="p">()</span>               <span class="c1">// s</span>
</span><span class='line'><span class="n">usleep</span><span class="p">()</span>            <span class="c1">// us</span>
</span><span class='line'><span class="n">nanosleep</span><span class="p">()</span>         <span class="c1">// ns</span>
</span><span class='line'><span class="n">clock_nanosleep</span><span class="p">()</span>   <span class="c1">// POSIX规范接口，更高级，提供各种类型的定时器</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外，应该知道的是，select调用也是能够实现微秒级的定时器的 ，而且移植性较好。</p>

<p>同时在调用这些接口时，需要处理返回值或者errno，以提高程序的健壮性，比如睡眠被信号打断这类的事件。</p>

<h3>进程唯一的实时定时器</h3>

<p>对于进程唯一的实时定时器的使用，系统提供了两类接口：<code>alarm/ualarm</code>，以及 <code>getitimer/setitimer</code></p>

<p>前者(<code>alarm/ualarm</code>)是简单的小闹钟，结合信号量使用，精确度在秒级。</p>

<p>后者(<code>getitimer/setitimer</code>)则更为高级，其提供了3种工作模式，能够较好的过滤掉诸如上下文切换带来的统计误差：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">REAL</span><span class="err">：记录墙上时间的流逝（</span><span class="n">SIGALARM</span><span class="err">）</span>
</span><span class='line'><span class="n">VIRTUAL</span><span class="err">：只记录进程空间的时间流逝（</span><span class="n">SIGVTALARM</span><span class="err">）</span>
</span><span class='line'><span class="n">PROF</span><span class="err">：在进程执行以及内核为进程服务时，记录时间的流逝（</span><span class="n">SIGPROF</span><span class="err">）</span>
</span></code></pre></td></tr></table></div></figure>


<h3>POSIX实时扩展定时器</h3>

<p>如果需要更高的时间精度，或者需要多个定时器，那么每个进程一个的实时间隔定时器就无能为力了，这个时候我们可以选择<code>POSIX实时扩展中的定时器</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">timer_create</span><span class="p">(</span><span class="n">clockid_t</span> <span class="n">clockid</span><span class="p">,</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">sigevent</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">evp</span><span class="p">,</span>
</span><span class='line'>          <span class="n">timer_t</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">timerid</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">timer_getoverrun</span><span class="p">(</span><span class="n">timer_t</span> <span class="n">timerid</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">timer_gettime</span><span class="p">(</span><span class="n">timer_t</span> <span class="n">timerid</span><span class="p">,</span> <span class="k">struct</span> <span class="n">itimerspec</span> <span class="o">*</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">timer_settime</span><span class="p">(</span><span class="n">timer_t</span> <span class="n">timerid</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="k">struct</span> <span class="n">itimerspec</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">value</span><span class="p">,</span>
</span><span class='line'>              <span class="k">struct</span> <span class="n">itimerspec</span> <span class="o">*</span><span class="kr">restrict</span> <span class="n">ovalue</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>它实际上就是<strong>进程间隔定时器</strong>的增强版，除了可以定制时钟源（nanosleep也存在能定制时钟源的版本：clock_nanosleep）和时间精度提高到纳秒外，它还能通过将<code>evp-&gt;sigev_notify</code>设定为如下值来定制定时器到期后的行为：</p>

<ol>
<li><strong>SIGEV_SIGNAL</strong>：发送由<code>evp-&gt;sigev_sino</code>指定的信号到调用进程，<code>evp-&gt;sigev_value</code>的值将被作为<code>siginfo_t</code>结构体中<code>si_value</code>的值。</li>
<li><strong>SIGEV_NONE</strong>：什么都不做，只提供通过<code>timer_gettime</code>和<code>timer_getoverrun</code>查询超时信息。</li>
<li><strong>SIGEV_THREAD</strong>：以<code>evp-&gt;sigev_notification_attributes</code>为线程属性创建一个线程，在新建的线程内部以<code>evp-&gt;sigev_value</code>为参数调用<code>evp-&gt;sigev_notification_function</code>。</li>
<li><strong>SIGEV_THREAD_ID</strong>：和<code>SIGEV_SIGNAL</code>类似，不过它只将信号发送到线程号为<code>evp-&gt;sigev_notify_thread_id</code>的线程，注意：这里的线程号不一定是<code>POSIX</code>线程号，而是线程调用<code>gettid</code>返回的实际线程号,并且这个线程必须实际存在且属于当前的调用进程。</li>
</ol>


<h3>其它问题</h3>

<h4>更高的时间精度</h4>

<p>从前面的描述我们可以发现，Linux定时器很多都是基于时钟节拍的，那么当<code>HZ</code>较低比如100时，其节拍精度仅为10毫秒，那么显然对于一个想要在1毫秒级精度进行睡眠的进程而言，这个精度是无法容忍的，我们可以考虑适当提高<code>H</code>Z取值。</p>

<p>另外，Linux的API暗示它能够提供<strong>纳秒级</strong>的时间精度，但是，由于种种不确定因素，它实际上并不能提供纳秒级的精度，比较脆弱。如果你需要更高强度的实时性，请考虑采用软实时系统、硬实时系统、专有系统，甚至是专业硬件。</p>

<h4>传统信号的不可靠性</h4>

<p>传统UNIX信号是不可靠的，也就是说如果当前的信号没有被处理，那么后续的同类信号将被丢失，而不是被排队，而实时信号则没有这个问题，它是被排队的。联系到当前应用，如果信号丢失，则是因为任务消耗了过多的处理器时间，而这个不确定性是那个任务带来的，需要改进的应该是那个任务。</p>

<h4>系统负载过高</h4>

<p>如果系统的负载过高，使得我们的程序因为不能得到及时的调度导致时间精度降低，我们不妨通过<code>nice</code>提高当前程序的优先级，必要时可以通过<code>sched_setscheduler</code>将当前进程切换成优先级最高的实时进程以确保得到及时调度。</p>

<h4>硬件相关的问题</h4>

<p>硬件配置也极大的影响着定时器的精度，有的比较老的遗留系统可能没有比较精确的硬件定时器，那样的话我们就无法期待它能提供多高的时钟精度了。相反，如果系统的配置比较高，比如说对称多处理系统，那么即使有的处理器负载比较高，我们也能通过将一个处理器单独分配出来处理定时器来提高定时器的精度。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux世界里的时间]]></title>
    <link href="http://datawolf.github.com/blog/2013/05/26/linuxshi-jie-li-de-shi-jian/"/>
    <updated>2013-05-26T20:33:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/05/26/linuxshi-jie-li-de-shi-jian</id>
    <content type="html"><![CDATA[<p>通常，操作系统可以使用三种方法来表示系统的当前时间与日期：</p>

<ol>
<li>简单的一种方法就是直接用一个64位的计数器来对<strong>时钟滴答</strong>进行计数。</li>
<li>第二种方法就是用一个32位计数器来对<strong>秒</strong>进行计数，同时还用一个32位的辅助计数器对时钟滴答计数，直至累积到一秒为止。因为23<sup>2超过136年，因此这种方法直至22世纪都可以让系统工作得很好。</sup></li>
<li>第三种方法也是按<strong>时钟滴答</strong>进行计数，但是是相对于系统启动以来的滴答次数，而不是相对于某个确定的外部时刻；当读外部后备时钟（如RTC）或用户输入实际时间时，根据当前的滴答次数计算系统当前时间。</li>
</ol>


<h2>基本概念</h2>

<p>首先，有必要明确一些Linux内核时钟驱动中的基本概念。</p>

<h3>时钟周期的频率</h3>

<p>时钟周期（clock cycle）的频率：<code>8253／8254 PIT</code>的本质就是对由晶体振荡器产生的
时钟周期进行计数，<strong>晶体振荡器在1秒时间内产生的时钟脉冲个数就是时钟周期的频率</strong>。</p>

<p>Linux用宏<code>CLOCK_TICK_RATE</code>来表示<code>8254 PIT</code>的输入时钟脉冲的频率,该宏定义在<code>arch/x86/include/asm/timex.h</code>头文件中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">arch</span><span class="o">/</span><span class="n">x86</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">asm</span><span class="o">/</span><span class="n">timex</span><span class="p">.</span><span class="n">h</span><span class="o">:</span><span class="mi">8</span><span class="o">:</span><span class="err">#</span><span class="n">define</span> <span class="n">CLOCK_TICK_RATE</span>  <span class="n">PIT_TICK_RATE</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">timex</span><span class="p">.</span><span class="n">h</span><span class="o">:</span><span class="mi">153</span><span class="o">:</span><span class="err">#</span><span class="n">define</span> <span class="n">PIT_TICK_RATE</span> <span class="mi">1193182ul</span>
</span></code></pre></td></tr></table></div></figure>


<h3>时钟滴答</h3>

<p>时钟滴答（clock tick）：当PIT通道0的计数器减到0值时，它就在<code>IRQ0</code>上产生一次时钟中断，也即一次<strong>时钟滴答</strong>。PIT通道0的计数器的初始值决定了要过多少时钟周期才产生一次时钟中断，因此也就决定了一次时钟滴答的时间间隔长度。</p>

<h3>时钟滴答的频率</h3>

<p>时钟滴答的频率（HZ）：即<strong>1秒时间内PIT所产生的时钟滴答次数</strong>。类似地，这个值也是由PIT通道0的计数器初值决定的（反过来说，确定了时钟滴答的频率值后也就可以确定8254 PIT通道0的计数器初值）。</p>

<p>Linux内核用宏<code>HZ</code>来表示时钟滴答的频率，而且在不同的平台上<code>HZ</code>有不同的定义值。对于ALPHA和IA62平台HZ的值是1024，对于SPARC、MIPS、ARM和i386等平台<code>HZ</code>的值都是100。该宏在i386平台上的定义如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef HZ </span>
</span><span class='line'><span class="cp">#define HZ 100 </span>
</span><span class='line'><span class="cp">#endif </span>
</span></code></pre></td></tr></table></div></figure>


<p>根据<code>HZ</code>的值，我们也可以知道一次时钟滴答的具体时间间隔应该是（1000ms／HZ）＝10ms。</p>

<!-- more -->


<h3>时钟滴答的时间间隔</h3>

<p>时钟滴答的时间间隔：Linux用全局变量<code>tick</code>来表示时钟滴答的时间间隔长度，该变量定义在<code>kernel/timer.</code>c文件中，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">long</span> <span class="n">tick</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1000000</span> <span class="o">+</span> <span class="n">HZ</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">HZ</span><span class="p">;</span> <span class="cm">/* timer interrupt period */</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>tick</code>变量的单位是<strong>微妙</strong>（μs），由于在不同平台上宏HZ的值会有所不同，因此方程式tick＝1000000÷HZ的结果可能会是个小数，因此将其进行四舍五入成一个整数，所以Linux将<code>tick</code>定义成（1000000＋HZ／2）／HZ，其中被除数表达式中的HZ／2的作用就是用来将<code>tick</code>值向上圆整成一个整型数。</p>

<p>另外，Linux还用宏<code>TICK_SIZE</code>来作为tick变量的引用别名（alias），其定义如下（<code>arch／i386/kernel/time.c</code>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#define TICK_SIZE tick </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>宏LATCH</h3>

<p>宏LATCH：Linux用宏<code>LATCH</code>来定义<strong>要写到PIT通道0的计数器中的值</strong>，它表示PIT将每隔多少个时钟周期产生一次时钟中断。显然LATCH应该由下列公式计算：</p>

<pre><code>LATCH＝（1秒之内的时钟周期个数）÷（1秒之内的时钟中断次数）＝（CLOCK_TICK_RATE）÷（HZ） 
</code></pre>

<p>类似地，上述公式的结果可能会是个小数，应该对其进行四舍五入。所以，Linux将<code>LATCH</code>定义为（<code>/include/linux/jiffies.h</code>）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">jiffies</span><span class="p">.</span><span class="n">h</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="cm">/* LATCH is used in the interval timer and ftape setup. */</span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">linux</span><span class="o">/</span><span class="n">jiffies</span><span class="p">.</span><span class="n">h</span><span class="o">:</span><span class="mi">55</span><span class="o">:</span><span class="err">#</span><span class="n">define</span> <span class="n">LATCH</span> <span class="p">((</span><span class="n">CLOCK_TICK_RATE</span> <span class="o">+</span> <span class="n">HZ</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="n">HZ</span><span class="p">)</span> <span class="cm">/* For divider */</span>
</span></code></pre></td></tr></table></div></figure>


<p>类似地，被除数表达式中的HZ／2也是用来将<code>LATCH</code>向上圆整成一个整数。</p>

<h2>时间的内核数据结构</h2>

<p>作为一种UNIX类操作系统，Linux内核显然采用本文开始所述的第三种方法来表示系统的当前时间。Linux内核在表示系统当前时间时用到了三个重要的数据结构：</p>

<h3>全局变量jiffies</h3>

<p><strong>全局变量jiffies</strong>：这是一个32位的无符号整数，用来表示自内核上一次启动以来的时钟滴答次数。每发生一次时钟滴答，内核的时钟中断处理函数<code>timer_interrupt()</code>都要将该全局变量<code>jiffies</code>加1。</p>

<p>该变量定义在<code>include/linux/jiffies.h</code>源文件中，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   * The 64-bit value is not atomic - you MUST NOT read it</span>
</span><span class='line'><span class="cm">   * without sampling the sequence number in jiffies_lock.</span>
</span><span class='line'><span class="cm">   * get_jiffies_64() will do this for you as appropriate.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">extern</span> <span class="n">u64</span> <span class="n">__jiffy_data</span> <span class="n">jiffies_64</span><span class="p">;</span>
</span><span class='line'>  <span class="k">extern</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="k">volatile</span> <span class="n">__jiffy_data</span> <span class="n">jiffies</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>C语言限定符<code>volatile</code>表示<code>jiffies</code>是一个易该变的变量，因此编译器将使对该变量的访问从不通过CPU内部cache来进行。</p>

<p><code>__jiffy_data</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/* some arch&#39;s have a small-data section that can be accessed register-relative</span>
</span><span class='line'><span class="cm">   * but that can only take up to, say, 4-byte variables. jiffies being part of</span>
</span><span class='line'><span class="cm">   * an 8-byte variable may not be correctly accessed unless we force the issue</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">__jiffy_data</span>  <span class="n">__attribute__</span><span class="p">((</span><span class="n">section</span><span class="p">(</span><span class="s">&quot;.data&quot;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>全局变量xtime</h3>

<p><strong>全局变量xtime</strong>：它是一个<code>timeval</code>结构类型的变量，用来表示当前时间距UNIX时间基准
1970－01－01 00：00：00的<strong>相对秒数值</strong>。结构<code>timeval</code>是Linux内核表示时间的一种格式
（Linux内核对时间的表示有多种格式，每种格式都有不同的时间精度），其时间精度是<strong>微秒</strong>。
该结构是内核表示时间时最常用的一种格式，它定义在头文件<code>include/uapi/linux/time.h</code>中，
如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">timeval</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">__kernel_time_t</span>    <span class="n">tv_sec</span><span class="p">;</span> <span class="cm">/* seconds */</span>
</span><span class='line'>          <span class="n">__kernel_suseconds_t</span>    <span class="n">tv_usec</span><span class="p">;</span><span class="cm">/* microseconds */</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__kernel_time_t</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="n">__kernel_long_t</span> <span class="n">__kernel_time_t</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">__kernel_long_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>__kernel_suseconds_t</code>的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#ifndef __kernel_suseconds_t</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">__kernel_long_t</span>         <span class="n">__kernel_suseconds_t</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">__kernel_long_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中，成员<code>tv_sec</code>表示当前时间距UNIX时间基准的秒数值，而成员<code>tv_usec</code>则表示一秒之内的
微秒值，且<code>1000000&gt;tv_usec&gt;＝0</code>。Linux内核通过<code>timeval</code>结构类型的全局变量<code>xtime</code>来维持当前时间，该变量定义在<code>kernel/timer.c</code>文件中，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* The current time */</span>
</span><span class='line'><span class="k">volatile</span> <span class="k">struct</span> <span class="n">timeval</span> <span class="n">xtime</span> <span class="nf">__attribute__</span> <span class="p">((</span><span class="n">aligned</span> <span class="p">(</span><span class="mi">16</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>全局变量sys_tz</h3>

<p><strong>全局变量sys_tz</strong>：它是一个<code>timezone</code>结构类型的全局变量，表示系统当前的时区信息。结构类型<code>timezone</code>定义在<code>include/uapi/linux/time.h</code>头文件中，如下所示:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">struct</span> <span class="n">timezone</span> <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span>     <span class="n">tz_minuteswest</span><span class="p">;</span> <span class="cm">/* minutes west of Greenwich */</span>
</span><span class='line'>          <span class="kt">int</span>     <span class="n">tz_dsttime</span><span class="p">;</span>     <span class="cm">/* type of dst correction */</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>基于上述结构，Linux在<code>kernel/time.c</code>文件中定义了全局变量<code>sys_tz</code>表示系统当前所处的时区信息，如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">   * The timezone where the local system is located.  Used as a default by some</span>
</span><span class='line'><span class="cm">   * programs who obtain this value by using gettimeofday.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">timezone</span> <span class="n">sys_tz</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[which 命令分析]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/14/which-ming-ling-fen-xi/"/>
    <updated>2013-04-14T17:03:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/14/which-ming-ling-fen-xi</id>
    <content type="html"><![CDATA[<h2>环境</h2>

<p>Linux 3.2.0-40-generic #64-Ubuntu SMP Mon Mar 25 21:22:10 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</p>

<h3>which 命令的位置</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>datawolf@datawolf-ThinkPad-Edge:~<span class="nv">$ </span>which -a which
</span><span class='line'>/usr/bin/which
</span><span class='line'>/bin/which
</span></code></pre></td></tr></table></div></figure>


<h3>分析两个which文件的类型</h3>

<p>通过以下shell命令可以看出，<code>/usr/bin/which</code>是一个指向<code>/bin/which</code>的符号链接。而<code>/bin/which</code>是一个shell脚本。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>datawolf@datawolf-ThinkPad-Edge:~<span class="nv">$ </span>ls -al  /usr/bin/which /bin/which
</span><span class='line'>-rwxr-xr-x 1 root root 946 Mar 30  2012 /bin/which
</span><span class='line'>lrwxrwxrwx 1 root root  10 Feb 21 16:23 /usr/bin/which -&gt; /bin/which
</span><span class='line'>datawolf@datawolf-ThinkPad-Edge:~<span class="nv">$ </span>file /usr/bin/which
</span><span class='line'>/usr/bin/which: symbolic link to <span class="sb">`</span>/bin/which<span class="err">&#39;</span>
</span><span class='line'>datawolf@datawolf-ThinkPad-Edge:~<span class="nv">$ </span>file /bin/which
</span><span class='line'>/bin/which: POSIX shell script, ASCII text executable
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h3>/bin/which 文件分析</h3>

<p><strong>which</strong>命令的原理：该命令在系统<code>$PATH</code>环境变量指向的目录中，寻找是否有指定的可执行的命令。
其用发如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>which -a ping <span class="c"># 寻找所有的ping命令在系统中的路径位置</span>
</span><span class='line'><span class="nv">$ </span>which ping <span class="c"># 寻找第一个ping命令在系统中的路径位置</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>which</strong>命令的源代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># -e 如果命令带非0返回值，立即退出</span>
</span><span class='line'><span class="c"># -f 禁止带扩展名的路径</span>
</span><span class='line'><span class="nb">set</span> -ef
</span><span class='line'>
</span><span class='line'><span class="c"># $KSH_VERSION变量表示ksh的版本</span>
</span><span class='line'><span class="k">if </span><span class="nb">test</span> -n <span class="s2">&quot;$KSH_VERSION&quot;</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span>puts<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      print -r -- <span class="s2">&quot;$*&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span>puts<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="nb">printf</span> <span class="s1">&#39;%s\n&#39;</span> <span class="s2">&quot;$*&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nv">ALLMATCHES</span><span class="o">=</span>0
</span><span class='line'>
</span><span class='line'><span class="c"># 查找是否有选项-a</span>
</span><span class='line'><span class="c"># 如果有选项-a，打印所有匹配的命令，否则打印第一个匹配的命令</span>
</span><span class='line'><span class="k">while </span><span class="nb">getopts </span>a whichopts
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">        case</span> <span class="s2">&quot;$whichopts&quot;</span> in
</span><span class='line'>                a<span class="o">)</span> <span class="nv">ALLMATCHES</span><span class="o">=</span>1 ;;
</span><span class='line'>                ?<span class="o">)</span> puts <span class="s2">&quot;Usage: $0 [-a] args&quot;</span>; <span class="nb">exit </span>2 ;;
</span><span class='line'>        <span class="k">esac</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="c"># shift n 表示将原来的位置参数左移n位。</span>
</span><span class='line'><span class="c"># $OPTIND 代表下一个待处理的参数的索引</span>
</span><span class='line'><span class="nb">shift</span> <span class="k">$((</span><span class="nv">$OPTIND</span> <span class="o">-</span> <span class="m">1</span><span class="k">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $#标表示参数的个数</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k"> </span><span class="nv">ALLRET</span><span class="o">=</span>1
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k"> </span><span class="nv">ALLRET</span><span class="o">=</span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">case</span> <span class="nv">$PATH</span> in
</span><span class='line'>  <span class="o">(</span>*<span class="o">[</span>!:<span class="o">]</span>:<span class="o">)</span> <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$PATH:&quot;</span> ;;
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="c"># $@代表输入的所有的命令行参数</span>
</span><span class='line'><span class="c"># $IFS表示bash内部的域分割符。默认值为空格</span>
</span><span class='line'><span class="c"># [-f &quot;filename&quot;] 判断是否是一个文件</span>
</span><span class='line'><span class="c"># [-x &quot;filename&quot;] 判断文件是否具有可执行权限</span>
</span><span class='line'><span class="c"># [-z &quot;str&quot;] 判断字符串长度是否为0</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>PROGRAM in <span class="s2">&quot;$@&quot;</span>; <span class="k">do</span>
</span><span class='line'><span class="k"> </span><span class="nv">RET</span><span class="o">=</span>1
</span><span class='line'> <span class="nv">IFS_SAVE</span><span class="o">=</span><span class="s2">&quot;$IFS&quot;</span>
</span><span class='line'> <span class="nv">IFS</span><span class="o">=</span>:
</span><span class='line'><span class="c"># 该程序首先判断具有全部路径的命令是否存在，比如这样使用： which /usr/bin/ls</span>
</span><span class='line'><span class="c"># 如果当使用如下时： which ls 该程序将在系统$PATH的路径下寻找相应的程序。</span>
</span><span class='line'> <span class="k">case</span> <span class="nv">$PROGRAM</span> in
</span><span class='line'>  */*<span class="o">)</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> -f <span class="s2">&quot;$PROGRAM&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -x <span class="s2">&quot;$PROGRAM&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span>puts <span class="s2">&quot;$PROGRAM&quot;</span>
</span><span class='line'>    <span class="nv">RET</span><span class="o">=</span>0
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'>   ;;
</span><span class='line'>  *<span class="o">)</span>
</span><span class='line'>   <span class="k">for </span>ELEMENT in <span class="nv">$PATH</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -z <span class="s2">&quot;$ELEMENT&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">     </span><span class="nv">ELEMENT</span><span class="o">=</span>.
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -f <span class="s2">&quot;$ELEMENT/$PROGRAM&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -x <span class="s2">&quot;$ELEMENT/$PROGRAM&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">     </span>puts <span class="s2">&quot;$ELEMENT/$PROGRAM&quot;</span>
</span><span class='line'>     <span class="nv">RET</span><span class="o">=</span>0
</span><span class='line'>     <span class="o">[</span> <span class="s2">&quot;$ALLMATCHES&quot;</span> -eq 1 <span class="o">]</span> <span class="o">||</span> <span class="nb">break</span>
</span><span class='line'><span class="nb">    </span><span class="k">fi</span>
</span><span class='line'><span class="k">   done</span>
</span><span class='line'>   ;;
</span><span class='line'> <span class="k">esac</span>
</span><span class='line'><span class="k"> </span><span class="nv">IFS</span><span class="o">=</span><span class="s2">&quot;$IFS_SAVE&quot;</span>
</span><span class='line'> <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$RET&quot;</span> -ne 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">ALLRET</span><span class="o">=</span>1
</span><span class='line'> <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="k"> </span>
</span><span class='line'><span class="nb">exit</span> <span class="s2">&quot;$ALLRET&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CentOS 中的which命令</h3>

<h4>环境</h4>

<p>Linux 2.6.32-220.17.1.el6.x86_64 #1 SMP Wed May 16 00:01:37 BST 2012 x86_64 x86_64 x86_64 GNU/Linux</p>

<p>which - shows the full path of (shell) commands</p>

<p>Which takes one or more arguments. For each of its arguments it prints to stdout the full path of the executables that would have been executed when this argument had been entered at the shell prompt. It does this by searching for an executable or script in the directories listed in the environment variable PATH using the same algorithm as bash(1)</p>

<h4>在CentOS下，which是c语言写的</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>wanglong@wanglong ~<span class="o">]</span><span class="nv">$ </span>which -a which
</span><span class='line'><span class="nb">alias </span><span class="nv">which</span><span class="o">=</span><span class="s1">&#39;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#39;</span>
</span><span class='line'>  /usr/bin/which
</span><span class='line'>/usr/bin/which
</span><span class='line'><span class="o">[</span>wanglong@wanglong ~<span class="o">]</span><span class="nv">$ </span>file /usr/bin/which
</span><span class='line'>/usr/bin/which: ELF 64-bit LSB executable, x86-64, version 1 <span class="o">(</span>SYSV<span class="o">)</span>, dynamically linked <span class="o">(</span>uses shared libs<span class="o">)</span>, <span class="k">for </span>GNU/Linux 2.6.18, stripped
</span><span class='line'><span class="o">[</span>wanglong@wanglong ~<span class="o">]</span><span class="nv">$ </span>ldd /usr/bin/which
</span><span class='line'>  linux-vdso.so.1 <span class="o">=</span>&gt;  <span class="o">(</span>0x00007fff74fff000<span class="o">)</span>
</span><span class='line'>  libc.so.6 <span class="o">=</span>&gt; /lib64/libc.so.6 <span class="o">(</span>0x0000003250400000<span class="o">)</span>
</span><span class='line'>  /lib64/ld-linux-x86-64.so.2 <span class="o">(</span>0x0000003250000000<span class="o">)</span>
</span><span class='line'><span class="o">[</span>wanglong@wanglong ~<span class="o">]</span><span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动备份网站和数据库的shell脚本]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/06/zi-dong-bei-fen-wang-zhan-he-shu-ju-ku-de-shelljiao-ben/"/>
    <updated>2013-04-06T16:05:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/06/zi-dong-bei-fen-wang-zhan-he-shu-ju-ku-de-shelljiao-ben</id>
    <content type="html"><![CDATA[<h2>备份网站内容</h2>

<p>我的网站是用xampp集成环境搭建的。为了方便迁移和备份数据。使用如下脚本对我网站内容进行备份。其中，<code>BACKUPDIR</code>指定备份文件的存储位置。
每一次备份的文件都用备份时系统的时间来进行唯一的命名，获取实际使用命令<code>date -I</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># where to store the backup file</span>
</span><span class='line'><span class="nv">BACKUPDIR</span><span class="o">=</span><span class="s2">&quot;/home/wanglong&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">DATE</span><span class="o">=</span><span class="sb">`</span>date -I<span class="sb">`</span>
</span><span class='line'><span class="o">[</span> ! -d <span class="nv">$BACKUPDIR</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -p <span class="nv">$BACKUPDIR</span>
</span><span class='line'><span class="nb">cd</span> /opt/lampp
</span><span class='line'>tar  zcf <span class="nv">$BACKUPDIR</span>/htdocs.<span class="nv">$DATE</span>.tar.gz htdocs
</span></code></pre></td></tr></table></div></figure>


<h2>备份mysql数据库</h2>

<p>备份数据库前，需要指定一下shell变量，包括mysql数据库的用户名、密码、运行数据库的主机和数据库相关命令的位置。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">MYUSER</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>
</span><span class='line'><span class="nv">MYPASS</span><span class="o">=</span><span class="s2">&quot;password&quot;</span>
</span><span class='line'><span class="nv">HOST</span><span class="o">=</span><span class="s2">&quot;localhost&quot;</span>
</span><span class='line'><span class="nv">BACKUPDIR</span><span class="o">=</span><span class="s2">&quot;/home/wanglong&quot;</span>
</span><span class='line'><span class="nv">MYSQL</span><span class="o">=</span><span class="s2">&quot;/opt/lampp/bin/mysql&quot;</span>
</span><span class='line'><span class="nv">MYSQL_DUMP</span><span class="o">=</span><span class="s2">&quot;/opt/lampp/bin/mysqldump&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整shell脚本如下，首先将所有的数据库作为一个整体进行备份，然后对每一个数据库分别进行了备份。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">MYUSER</span><span class="o">=</span><span class="s2">&quot;user&quot;</span>
</span><span class='line'><span class="nv">MYPASS</span><span class="o">=</span><span class="s2">&quot;password&quot;</span>
</span><span class='line'><span class="nv">HOST</span><span class="o">=</span><span class="s2">&quot;localhost&quot;</span>
</span><span class='line'><span class="nv">BACKUPDIR</span><span class="o">=</span><span class="s2">&quot;/home/wanglong&quot;</span>
</span><span class='line'><span class="nv">MYSQL</span><span class="o">=</span><span class="s2">&quot;/opt/lampp/bin/mysql&quot;</span>
</span><span class='line'><span class="nv">MYSQL_DUMP</span><span class="o">=</span><span class="s2">&quot;/opt/lampp/bin/mysqldump&quot;</span>
</span><span class='line'><span class="nv">DATE</span><span class="o">=</span><span class="sb">`</span>date -I<span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> ! -d <span class="nv">$BACKUPDIR</span>/<span class="nv">$DATE</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -p <span class="nv">$BACKUPDIR</span>/<span class="nv">$DATE</span>
</span><span class='line'>
</span><span class='line'><span class="c"># backup all databases in a file</span>
</span><span class='line'><span class="nv">$MYSQL_DUMP</span> -u<span class="nv">$MYUSER</span> -p<span class="nv">$MYPASS</span> -h<span class="nv">$HOST</span>  --all-databases &gt; <span class="nv">$BACKUPDIR</span>/<span class="nv">$DATE</span>/all-databases.sql
</span><span class='line'>
</span><span class='line'><span class="c"># backup each database in separate file</span>
</span><span class='line'><span class="nv">DBS</span><span class="o">=</span><span class="sb">`</span><span class="nv">$MYSQL</span> -u<span class="nv">$MYUSER</span> -p<span class="nv">$MYPASS</span> -Bse <span class="s2">&quot;show databases&quot;</span>|grep -v <span class="s2">&quot;information_schema&quot;</span> | grep -v <span class="s2">&quot;performance_schema&quot;</span>|grep -v <span class="s2">&quot;Database&quot;</span><span class="sb">`</span>
</span><span class='line'><span class="k">for </span>db_name in <span class="nv">$DBS</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>    <span class="nv">$MYSQL_DUMP</span>  -u<span class="nv">$MYUSER</span> -p<span class="nv">$MYPASS</span> -h<span class="nv">$HOST</span>  <span class="nv">$db_name</span>  &gt; <span class="nv">$BACKUPDIR</span>/<span class="nv">$DATE</span>/<span class="nv">$db_name</span>.sql
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$BACKUPDIR</span>
</span><span class='line'>tar zcf mysql.<span class="nv">$DATE</span>.tar.gz <span class="nv">$DATE</span> <span class="o">&amp;&amp;</span> rm -rf <span class="nv">$BACKUPDIR</span>/<span class="nv">$DATE</span>
</span></code></pre></td></tr></table></div></figure>


<h2>自动执行脚本</h2>

<p>计划每周自动备份一次网站和数据库，所以需要将上述脚本拷贝到目录<code>/etc/cron.weekly/</code>中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using bat file to run python program on windows]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/06/using-bat-file-to-run-python-program-on-windows/"/>
    <updated>2013-04-06T15:56:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/06/using-bat-file-to-run-python-program-on-windows</id>
    <content type="html"><![CDATA[<h2>在windows下批处理文件中调用python</h2>

<p>由于python的变量的问题，不能在批处理文件<code>somefile.bat</code>正确使用<code>python somefile.py</code>来执行python程序。</p>

<p>所以需要在bat文件中临时修改python环境变量。</p>

<p>最终的bat文件如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">off</span>
</span><span class='line'><span class="k">set</span> <span class="nv">PYPATH</span><span class="o">=</span>C:\Python<span class="m">27</span>;C:\Python<span class="m">27</span>\Lib;C:\Python<span class="m">27</span>\libs;C:\Python<span class="m">27</span>\Tools\Scripts;
</span><span class='line'><span class="k">set</span> <span class="nv">path</span><span class="o">=</span><span class="nv">%PYPATH%</span>;<span class="nv">%path%</span>
</span><span class='line'><span class="p">@</span><span class="k">echo</span> <span class="k">on</span>
</span><span class='line'>
</span><span class='line'>python get_all_problems.py
</span><span class='line'>python get_need_solved.py
</span><span class='line'>python sort_problems.py
</span><span class='line'>
</span><span class='line'><span class="k">pause</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu下安装eclipse的Could not load SWT library问题]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/04/ubuntuxia-an-zhuang-eclipsede-could-not-load-swt-librarywen-ti/"/>
    <updated>2013-04-04T15:16:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/04/ubuntuxia-an-zhuang-eclipsede-could-not-load-swt-librarywen-ti</id>
    <content type="html"><![CDATA[<h2>Description</h2>

<p>版本：Ubuntu 12.04, Eclipse3.7.2-1, Oracle Java 1.6</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo apt-get install eclipse
</span></code></pre></td></tr></table></div></figure>


<h2>Question</h2>

<p>安装后打开eclipse，提示出错</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>An error has occurred. See the log file /home/datawolf/.eclipse/org.eclipse.platform_3.7.0_155965261/configuration/1365058671830.log.</span></code></pre></td></tr></table></div></figure>


<p>打开log文件，看到下面的错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>!SESSION 2013-04-04 14:57:51.666 -----------------------------------------------
</span><span class='line'>eclipse.buildId=I20110613-1736
</span><span class='line'>java.version=1.6.0_37
</span><span class='line'>java.vendor=Sun Microsystems Inc.
</span><span class='line'>BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
</span><span class='line'>Command-line arguments:  -os linux -ws gtk -arch x86_64
</span><span class='line'>
</span><span class='line'>!ENTRY org.eclipse.osgi 4 0 2013-04-04 14:57:53.033
</span><span class='line'>!MESSAGE Application error
</span><span class='line'>!STACK 1
</span><span class='line'>java.lang.UnsatisfiedLinkError: Could not load SWT library. Reasons: 
</span><span class='line'>  no swt-gtk-3740 in java.library.path
</span><span class='line'>  no swt-gtk in java.library.path
</span><span class='line'>  Can't load library: /home/datawolf/.swt/lib/linux/x86_64/libswt-gtk-3740.so
</span><span class='line'>  Can't load library: /home/datawolf/.swt/lib/linux/x86_64/libswt-gtk.so
</span><span class='line'>
</span><span class='line'>  at org.eclipse.swt.internal.Library.loadLibrary(Library.java:285)
</span><span class='line'>  at org.eclipse.swt.internal.Library.loadLibrary(Library.java:194)
</span><span class='line'>  at org.eclipse.swt.internal.C.&lt;clinit&gt;(C.java:21)
</span><span class='line'>  at org.eclipse.swt.internal.Converter.wcsToMbcs(Converter.java:63)
</span><span class='line'>  at org.eclipse.swt.internal.Converter.wcsToMbcs(Converter.java:54)
</span><span class='line'>  at org.eclipse.swt.widgets.Display.&lt;clinit&gt;(Display.java:132)
</span><span class='line'>  at org.eclipse.ui.internal.Workbench.createDisplay(Workbench.java:695)
</span><span class='line'>  at org.eclipse.ui.PlatformUI.createDisplay(PlatformUI.java:161)
</span><span class='line'>  at org.eclipse.ui.internal.ide.application.IDEApplication.createDisplay(IDEApplication.java:153)
</span><span class='line'>  at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:95)
</span><span class='line'>  at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
</span><span class='line'>  at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
</span><span class='line'>  at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
</span><span class='line'>  at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
</span><span class='line'>  at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
</span><span class='line'>  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
</span><span class='line'>  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
</span><span class='line'>  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
</span><span class='line'>  at java.lang.reflect.Method.invoke(Method.java:597)
</span><span class='line'>  at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
</span><span class='line'>  at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
</span><span class='line'>  at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
</span><span class='line'>  at org.eclipse.equinox.launcher.Main.main(Main.java:1386)</span></code></pre></td></tr></table></div></figure>


<h2>Solution</h2>

<p>把相关文件拷贝到<code>~/.swt/lib/linux/x86_64</code>下即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cp /usr/lib/jni/libswt-*3740.so ~/.swt/lib/linux/x86_64
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install sun jdk 6 on ubuntu linux]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/03/how-to-install-sun-jdk-6-on-ubuntu-linux/"/>
    <updated>2013-04-03T17:12:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/03/how-to-install-sun-jdk-6-on-ubuntu-linux</id>
    <content type="html"><![CDATA[<h2>下载相应的版本</h2>

<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk6u37-downloads-1859587.html">下载地址</a>下载相应的版本，32位就x86，64位就x64，我下载的是jdk-6u37-linux-x64.bin；</p>

<h2>安装</h2>

<p>1、创建安装目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo mkdir /usr/java
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/java/
</span></code></pre></td></tr></table></div></figure>


<p>2、拷贝下载好的jdk到安装目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo mv ~/jdk-6u37-linux-x64.bin ./
</span></code></pre></td></tr></table></div></figure>


<p>3、安装</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo ./jdk-6u37-linux-x64.bin
</span></code></pre></td></tr></table></div></figure>


<p>安装完后，会在<code>/usr/java</code>目录下多出一个<code>jdk_1.6.0_37</code>的目录。</p>

<h2>配置</h2>

<p>1、配置环境变量</p>

<p>编辑<code>/etc/bashrc</code>，添加如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JAVA_HOME=/usr/java/jdk1.6.0_37
</span><span class='line'>PATH=$PATH:$JAVA_HOME/bin
</span><span class='line'>CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$CLASSPATH
</span><span class='line'>export JAVA_HOME PATH CLASSPATH</span></code></pre></td></tr></table></div></figure>


<p>2、使环境变量生效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">source</span> /etc/bashrc
</span></code></pre></td></tr></table></div></figure>


<p>3、替换ubuntu默认的jdk</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>sudo update-alternatives --install /usr/bin/java  java  /usr/java/jdk1.6.0_37/bin/java 999
</span><span class='line'><span class="nv">$ </span>sudo update-alternatives --install /usr/bin/javac  javac  /usr/java/jdk1.6.0_37/bin/javac 999
</span><span class='line'><span class="nv">$ </span>sudo update-alternatives --install /usr/bin/javadoc javadoc /usr/java/jdk1.6.0_37/bin/javadoc 999
</span><span class='line'>
</span><span class='line'><span class="c">#以下三个命令会让你选择，选择刚安装好的版本就行了</span>
</span><span class='line'><span class="nv">$ </span>sudo update-alternatives --config java
</span><span class='line'><span class="nv">$ </span>sudo update-alternatives --config javac
</span><span class='line'><span class="nv">$ </span>sudo update-alternatives --config javadoc
</span></code></pre></td></tr></table></div></figure>


<p>4、检查一下，是否正确</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>ls -lh /etc/alternatives/java*
</span></code></pre></td></tr></table></div></figure>


<p>结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lrwxrwxrwx 1 root root 30 Apr  3 17:27 /etc/alternatives/java -&gt; /usr/java/jdk1.6.0_37/bin/java
</span><span class='line'>lrwxrwxrwx 1 root root 31 Apr  3 17:28 /etc/alternatives/javac -&gt; /usr/java/jdk1.6.0_37/bin/javac
</span><span class='line'>lrwxrwxrwx 1 root root 33 Apr  3 17:28 /etc/alternatives/javadoc -&gt; /usr/java/jdk1.6.0_37/bin/javadoc</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 学习笔记 2]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/01/git-xue-xi-bi-ji-2/"/>
    <updated>2013-04-01T14:14:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/01/git-xue-xi-bi-ji-2</id>
    <content type="html"><![CDATA[<h1>历史</h1>

<p>显示全部历史记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log
</span></code></pre></td></tr></table></div></figure>


<p>显示版本历史，以及版本间的内容差异</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -p
</span></code></pre></td></tr></table></div></figure>


<p>只显示最近一个提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -1
</span></code></pre></td></tr></table></div></figure>


<p>显示最近的20个提交，以及版本间的内容差异</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -20 -p
</span></code></pre></td></tr></table></div></figure>


<p>显示最近6个小时的提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --since<span class="o">=</span><span class="s2">&quot;6 hours&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>显示两天前的提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --before<span class="o">=</span><span class="s2">&quot;2 days&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>显示比HEAD（当前检出分支的末稍）早三个提交的那个提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -1 HEAD~3
</span><span class='line'><span class="nv">$ </span>git log -1 HEAD^^^
</span><span class='line'><span class="nv">$ </span>git log -1 HEAD~1^^
</span></code></pre></td></tr></table></div></figure>


<p>显示两个版本直接的提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log &lt;start point&gt;...&lt;end point&gt;
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>显示历史，每一个提交显示一行，包括提交注释的第一行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>oneline
</span></code></pre></td></tr></table></div></figure>


<p>显示改动行数统计</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --stat
</span></code></pre></td></tr></table></div></figure>


<p>显示改动文件的名称和状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --name-status
</span></code></pre></td></tr></table></div></figure>


<p>显示当前工作目录树和暂存区间的差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff
</span></code></pre></td></tr></table></div></figure>


<p>显示暂存区和版本库之间的差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff --cached
</span></code></pre></td></tr></table></div></figure>


<p>显示工作目录树和版本库间的差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff HEAD
</span></code></pre></td></tr></table></div></figure>


<p>显示工作目录树和版本库中某次提交版本之间的差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff &lt;start point&gt;
</span></code></pre></td></tr></table></div></figure>


<p>显示版本库中两个版本之间的差别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff &lt;start point&gt; &lt;end point&gt;
</span></code></pre></td></tr></table></div></figure>


<p>显示差别的相关统计</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff --stat &lt;start point&gt; <span class="o">[</span>&lt;end point&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>显示文件中各个部分的修改者及相关提交信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git blame &lt;some file&gt;
</span></code></pre></td></tr></table></div></figure>


<p>显示文件中各部分的修改者及相关提交信息，包括在文件移动内容方面的情况</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git blame &lt;some file&gt;
</span><span class='line'><span class="nv">$ </span>git blame -M &lt;some file&gt;
</span></code></pre></td></tr></table></div></figure>


<p>显示历史时，显示复制和粘贴信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -C -C -p -1 &lt;some point&gt;
</span></code></pre></td></tr></table></div></figure>


<h1>远程版本库</h1>

<p>克隆远程版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone &lt;some repository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>克隆版本库，但只下载其中最近200个提交的历史记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone --depth 200 &lt;some repository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>在本地版本库中设置远程版本库的别名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add &lt;remote repository&gt; &lt;repository url&gt;
</span></code></pre></td></tr></table></div></figure>


<p>显示远程分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -r
</span></code></pre></td></tr></table></div></figure>


<p>基于远程分支创建本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch &lt;new branch&gt; &lt;remote branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>基于远程标签创建本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch &lt;new branch&gt; &lt;remote tag&gt;
</span></code></pre></td></tr></table></div></figure>


<p>从别名为<code>orgin</code>的远程版本库中取来修改变化，但不合并到本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch
</span></code></pre></td></tr></table></div></figure>


<p>从任意的远程版本库中取来修改变化，但不合并到本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch &lt;remote repository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>从任意的远程版本库中取来修改变化，并合并到当前检出的本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git pull &lt;remote repository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>从别名<code>orgin</code>的远程版本库中取来修改变化，并合并到当前检出的本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure>


<p>把修改变化从本地分支推入远程版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push &lt;remote repository&gt; &lt;<span class="nb">local </span>branch&gt;:&lt;remote branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>把修改变化从本地分支推入远程版本库中同名分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push &lt;remote repository&gt; &lt;<span class="nb">local </span>branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>把修改变化从本地新建分支推入远程版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push &lt;remote repository&gt; &lt;<span class="nb">local </span>branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>把修改变化推入别名为<code>orgin</code>的远程版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure>


<p>在远程版本库中删除分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push &lt;remote repository&gt;  :&lt;remote branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>在本地版本库中删除所有远程版本库中已不存在的分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote prune &lt;remote repository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>在本地版本库中删除某个远程版本库的简称，以及该远程版本库相关的分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote rm &lt;remote repository&gt;
</span></code></pre></td></tr></table></div></figure>


<h1>操作示例</h1>

<p>查看git日志</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log
</span><span class='line'><span class="nv">$ </span>git log 7b1558c
</span><span class='line'><span class="nv">$ </span>git log -10
</span><span class='line'><span class="nv">$ </span>git log --since<span class="o">=</span><span class="s2">&quot;5 hours&quot;</span>
</span><span class='line'><span class="nv">$ </span>git log --since<span class="o">=</span><span class="s2">&quot;5 hours&quot;</span> -1
</span><span class='line'><span class="nv">$ </span>git log 18f822e..0bb3dfb
</span><span class='line'><span class="nv">$ </span>git log 18f822e..HEAD
</span><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>format:<span class="s2">&quot;%h %s&quot;</span> 1.0..HEAD
</span></code></pre></td></tr></table></div></figure>


<p>查看版本之间的差异</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff 18f822e
</span><span class='line'><span class="nv">$ </span>git diff --stat 1.0
</span></code></pre></td></tr></table></div></figure>


<p>查明该向谁问责</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git blame hello.html
</span><span class='line'><span class="nv">$ </span>git blame -L 12,13 hello.html
</span><span class='line'><span class="nv">$ </span>git blame -L 12,+2 hello.html
</span><span class='line'><span class="nv">$ </span>git blame -L 12,-2 hello.html
</span><span class='line'><span class="nv">$ </span>git blame -: <span class="s2">&quot;/&lt;\/body&gt;/&quot;</span>,+2 hello.html
</span></code></pre></td></tr></table></div></figure>


<p>复位操作，将版本库复位到<code>HEAD</code>之前的那个版本了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git reset --hard HEAD^
</span></code></pre></td></tr></table></div></figure>


<p>显示远程分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch
</span><span class='line'>* master
</span><span class='line'><span class="nv">$ </span>git branch -r
</span><span class='line'>  origin/HEAD -&gt; origin/master
</span><span class='line'>  origin/about
</span><span class='line'>  origin/alternate
</span><span class='line'>  origin/contacts
</span><span class='line'>  origin/master
</span><span class='line'>  origin/new
</span></code></pre></td></tr></table></div></figure>


<p>更新远程分支，但不会把远程分支上的修改合并到本地分支上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch
</span></code></pre></td></tr></table></div></figure>


<p>取来远程分支并且合并，需要两个参数，一个是远程版本库名称，另一个需要拖入的远程分支名称</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git pull
</span></code></pre></td></tr></table></div></figure>


<p>推入改动，调用不带参数的<code>git push</code>命令时，git会推入到默认版本库origin中，并把本地版本库中当前所在分支的
变更推入到远程版本库对应的分支上。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push
</span></code></pre></td></tr></table></div></figure>


<p>将本地分支上<code>mybranch</code>上的提交推入远程版本库的主分支上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git push origin  mybranch:master
</span></code></pre></td></tr></table></div></figure>


<p>添加新的远程版本库，必须有相应的权限</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git 学习笔记 1]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/01/git-xue-xi-bi-ji-1/"/>
    <updated>2013-04-01T09:37:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/01/git-xue-xi-bi-ji-1</id>
    <content type="html"><![CDATA[<h1>安装和初始化</h1>

<p>配置全局用户名和电子邮件地址</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s2">&quot;yourname&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email <span class="s2">&quot;yourname@mail.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为特定版本库配置用户名和电子邮件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/repo
</span><span class='line'><span class="nv">$ </span>git config  user.name <span class="s2">&quot;yourname&quot;</span>
</span><span class='line'><span class="nv">$ </span>git config  user.email <span class="s2">&quot;yourname@mail.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看配置</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global --list
</span><span class='line'>user.name<span class="o">=</span>yourname
</span><span class='line'>user.email<span class="o">=</span>yourname@mail.com
</span></code></pre></td></tr></table></div></figure>


<p>在命令行中使用不同的颜色显示不同类型的内容，需要设置<code>color.ui</code>的值为<code>auto</code>或者<code>always</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global color.ui <span class="s2">&quot;auto&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>初始化新版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir /path/to/repo
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/repo
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;initial import&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>克隆版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone &lt;repository url&gt;
</span></code></pre></td></tr></table></div></figure>


<p>将目录中的内容纳入到git版本控制</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/existing/directory
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;initial import of some project&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>在本地版本库中设置远程版本库的别名</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add &lt;remote repository&gt;  &lt;repository url&gt;
</span></code></pre></td></tr></table></div></figure>


<h1>日常操作</h1>

<p>添加新文件或暂存已有文件上的改动，然后提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add &lt;some file&gt;
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;&lt;some message&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>替换已有文件上的部分修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add -p <span class="o">[</span>&lt;some file&gt; <span class="o">[</span>&lt;some file&gt; <span class="o">[</span>and so on<span class="o">]]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用交互式添加文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add -i
</span></code></pre></td></tr></table></div></figure>


<p>暂存已纳入git版本控制之下的文件的修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add -u <span class="o">[</span>&lt;some file&gt; <span class="o">[</span>&lt;some file&gt;<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>提交已纳入git版本控制之下的文件的所有修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;&lt;some message&gt;&quot;</span> -a
</span></code></pre></td></tr></table></div></figure>


<p>清除工作目录树中的修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout HEAD &lt;some file&gt; <span class="o">[</span>&lt;some file&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>取消已暂存但尚未提交的修改的暂存标识</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git reset HEAD &lt;some file&gt; <span class="o">[</span>&lt;some file&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>修复上一次提交中的问题，改动相关文件并暂存……</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;&lt;some message&gt;&quot;</span> --amend
</span></code></pre></td></tr></table></div></figure>


<p>修复上一次提交中的内容，并复用上次的提交注释</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -C HEAD --amend
</span></code></pre></td></tr></table></div></figure>


<h1>分支</h1>

<p>列出本地分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git  branch
</span></code></pre></td></tr></table></div></figure>


<p>列出远程分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -r
</span></code></pre></td></tr></table></div></figure>


<p>列出所有分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -a
</span></code></pre></td></tr></table></div></figure>


<p>基于当前分支（的末稍）创建新分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch &lt;new branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>检出另一条分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout &lt;new branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>基于当前分支创建新分支，同时检出该分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b &lt;new branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>基于另一个起点，创建新分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch &lt;some existing branch&gt; &lt;start point&gt;
</span></code></pre></td></tr></table></div></figure>


<p>创建同名新分支，覆盖已有分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -f &lt;some existing branch&gt; <span class="o">[</span>&lt;start point&gt;<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>移动或重命名分支
1、只有当<new branch name>不存在时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -m &lt;existing branch name&gt; &lt;new branch name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>2、如果<new branch name>以存在，就覆盖她</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -M &lt;existing branch name&gt; &lt;new branch name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>把另一条分支合并到当前分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git merge &lt;some branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>合并但不提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git merge --no-commit &lt;some branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>拣选合并，并且提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git cherry-pick  &lt;commit name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>拣选合并，但不提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git cherry-pick -n &lt;commit name&gt;
</span></code></pre></td></tr></table></div></figure>


<p>把一条分支上的内容压和到另一条分支（上的一个提交）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git merge --squash &lt;some branch&gt;
</span></code></pre></td></tr></table></div></figure>


<p>删除分支</p>

<p>1、进当欲删除分支已经合并到当前分支时</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -d &lt;branch to delete&gt;
</span></code></pre></td></tr></table></div></figure>


<p>2、不论欲删除分支是否已合并到当前分支上</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -D &lt;branch to delete&gt;
</span></code></pre></td></tr></table></div></figure>


<h1>举例说明</h1>

<p>添加一个文件index.html，使用<code>git add</code>命令将该文件添加到版本库的索引</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add index.html
</span></code></pre></td></tr></table></div></figure>


<p>使用<code>git commit</code>命令提交，即创建一个<code>提交记录</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add in hello world HTML&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看提交的相关信息</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log
</span></code></pre></td></tr></table></div></figure>


<p>在项目中工作，修改了index.html，显示工作树的状态</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>git add index.html
</span><span class='line'><span class="nv">$ </span>git status
</span></code></pre></td></tr></table></div></figure>


<p>Git可以接受任意多次的留言的输入，每一次另起一段</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add xxx to xxx&quot;</span> <span class="se">\</span>
</span><span class='line'>  -m <span class="s2">&quot;this is the second commit document&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>提交所有的修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -a
</span></code></pre></td></tr></table></div></figure>


<p>Git 输出一个提交条目或者多个提交条目，使用<code>-num</code>参数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log -1
</span><span class='line'><span class="nv">$ </span>git log -2
</span><span class='line'><span class="nv">$ </span>git log -5
</span></code></pre></td></tr></table></div></figure>


<p>创建一个分支，需要两个参数，第一个是新分支名称，第二个是父分支名称</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch RB_1.0  master
</span></code></pre></td></tr></table></div></figure>


<p>切换到分支RB_1.0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout RB_1.0
</span></code></pre></td></tr></table></div></figure>


<p>处理发布时，打标签命令。需要两个参数，第一个是标签的名称，第二个是分支的末稍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git tag 1.0 RB_1.0
</span></code></pre></td></tr></table></div></figure>


<p>查看版本库中的标签列表</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git tag
</span></code></pre></td></tr></table></div></figure>


<p>分支合并，使用变基命令，<code>git rebase</code> 跟一个参数，指的是变基到哪一条分支的末稍。
将master分支变基到RB_1.0分支的末稍</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'><span class="nv">$ </span>git rebase RB_1.0
</span></code></pre></td></tr></table></div></figure>


<p>删除分支RB_1.0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -d RB_1.0
</span></code></pre></td></tr></table></div></figure>


<p>删除分支后，只是删除了分支的名称，不会删除分支上的任何实际内容，可以使用标签来找到从标签
到版本树起点的一连串的提交记录</p>

<p>打补丁时创建分支的过程</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch RB_1.0.1 1.0
</span><span class='line'><span class="nv">$ </span>git checkout RB_1.0.1
</span></code></pre></td></tr></table></div></figure>


<p>修改完后在合并到分支1.0中。</p>

<p>快速产看历史记录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log --pretty<span class="o">=</span>oneline
</span></code></pre></td></tr></table></div></figure>


<p>为代码发布创建归档文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git archive --format<span class="o">=</span>tar <span class="se">\</span>
</span><span class='line'>              --prefix<span class="o">=</span>mysite-1.0/ 1.0 <span class="se">\</span>
</span><span class='line'>              | gzip &gt; mysite-1.0.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git archive --format<span class="o">=</span>zip <span class="se">\</span>
</span><span class='line'>              --prefix<span class="o">=</span>mysite-1.0/ 1.0 <span class="se">\</span>
</span><span class='line'>              &gt; mysite-1.0.zip
</span></code></pre></td></tr></table></div></figure>


<p>克隆远程版本库</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone http://github.com/tswicegood/mysite.git mysite-remote
</span></code></pre></td></tr></table></div></figure>


<p>提交修改有三种方法</p>

<p>1、先暂存，在提交</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git add some-file
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;changes to some-file&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>2、直接提交，提交工作目录树中的所有修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;changes to some-file&quot;</span>  -a
</span></code></pre></td></tr></table></div></figure>


<p>3、直接修改，提交工作目录树中指定的修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;changes to some-file&quot;</span> some-file
</span></code></pre></td></tr></table></div></figure>


<p>将命令<code>git commit</code>简写为<code>git ci</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global alias.ci <span class="s2">&quot;commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看工作目录树中所有的改动</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git status
</span></code></pre></td></tr></table></div></figure>


<p>比较工作目录树与暂存区之间的区别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff
</span></code></pre></td></tr></table></div></figure>


<p>比较暂存区和版本库直接的区别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff --cached
</span></code></pre></td></tr></table></div></figure>


<p>比较工作目录树（包括暂存和未暂存的修改）与版本库中的区别</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff HEAD
</span></code></pre></td></tr></table></div></figure>


<p><code>HEAD</code>指的是当前所在分支末稍的最新提交。</p>

<p>文件重命名与移动</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git mv index.html hello.html
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;rename to more appropriate name&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>忽略文件</p>

<p>1、可以在工作目录树下设置文件<code>.gitignore</code>来设置版本库级别的忽略。</p>

<p>2、可以通过编辑<code>.git/info/exclude</code>来设置本地级的忽略。</p>

<p>修改分支的名称,<code>-m</code>不会覆盖已有的分支名称，所以新分支必须是唯一的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -m master mymaster
</span></code></pre></td></tr></table></div></figure>


<p>创建新分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch new
</span><span class='line'><span class="nv">$ </span>git branch
</span></code></pre></td></tr></table></div></figure>


<p>检出刚才创建的分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout new
</span></code></pre></td></tr></table></div></figure>


<p>用快捷方法创建新分支<code>alternate</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b alternate master
</span></code></pre></td></tr></table></div></figure>


<p>合并分支间的修改</p>

<p>1、直接合并</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch
</span><span class='line'>* alternate
</span><span class='line'>  master
</span><span class='line'><span class="nv">$ </span>touch about.html
</span><span class='line'><span class="nv">$ </span>git add about.html
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add the skeleton of an about page&quot;</span>
</span><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'><span class="nv">$ </span>git merge alternate
</span></code></pre></td></tr></table></div></figure>


<p>2、压合合并</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git checkout -b contact master
</span><span class='line'><span class="nv">$ </span>git add contact.html
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add contact file with email&quot;</span>
</span><span class='line'><span class="c">#修改contact.html文件</span>
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add secondary email&quot;</span> -a
</span><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'><span class="nv">$ </span>git merge --squash contact
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;add contact&quot;</span> <span class="se">\</span>
</span><span class='line'>  -m <span class="s2">&quot;has primary and secondary email.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>3、拣选合并<code>git cherry-pick</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git cherry-pick 9826311
</span><span class='line'><span class="nv">$ </span>git cherry-pick -n 9826311
</span></code></pre></td></tr></table></div></figure>


<p>删除分支,<code>-d</code>删除合并了的分支，<code>-D</code>删除未合并的分支</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git branch -d about2
</span><span class='line'><span class="nv">$ </span>git branch -D about
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zombie Ninjas Attack: A survivor's retrospective]]></title>
    <link href="http://datawolf.github.com/blog/2013/03/29/zombie-ninjas-attack-a-survivors-retrospective/"/>
    <updated>2013-03-29T16:24:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/03/29/zombie-ninjas-attack-a-survivors-retrospective</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span>Discover if a number is prime</span><a href='http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/'>Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>code test</p>

<figure class='code'><figcaption><span>世界, 你好!</span><a href='http://wiki.l-cloud.org/'>源代码</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#define SIZE    5</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>code test 1</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Awesome code snippet</span></code></pre></td></tr></table></div></figure>




<blockquote><p>Last night I lay in bed looking up at the stars in the sky and I thought to myself, where the heck is the ceiling.</p></blockquote>


<h2>What is Octopress?</h2>

<p>Octopress is <a href="https://github.com/mojombo/jekyll">Jekyll</a> blogging at its finest.</p>

<ol>
<li><strong>Octopress sports a clean responsive theme</strong> written in semantic HTML5, focused on readability and friendliness toward mobile devices.</li>
<li><strong>Code blogging is easy and beautiful.</strong> Embed code (with <a href="http://ethanschoonover.com/solarized">Solarized</a> styling) in your posts from gists, jsFiddle or from your filesystem.</li>
<li><strong>Third party integration is simple</strong> with built-in support for Pinboard, Delicious, GitHub Repositories, Disqus Comments and Google Analytics.</li>
<li><strong>It&#8217;s easy to use.</strong> A collection of rake tasks simplifies development and makes deploying a cinch.</li>
<li><strong>Ships with great plug-ins</strong> some original and others from the Jekyll community &mdash; tested and improved.</li>
</ol>


<h2>Documentation</h2>

<p>Check out <a href="http://octopress.org/docs">Octopress.org</a> for guides and documentation.</p>

<h2>Contributing</h2>

<p><a href="https://travis-ci.org/imathis/octopress"><img src="https://travis-ci.org/imathis/octopress.png?branch=master" alt="Build Status" /></a></p>

<p>We love to see people contributing to Octopress, whether it&#8217;s a bug report, feature suggestion or a pull request. At the moment, we try to keep the core slick and lean, focusing on basic blogging needs, so some of your suggestions might not find their way into Octopress. For those ideas, we started a <a href="https://github.com/imathis/octopress/wiki/3rd-party-plugins">list of 3rd party plug-ins</a>, where you can link your own Octopress plug-in repositories. For the future, we&#8217;re thinking about ways to easier add them them into our main releases.</p>

<h2>License</h2>

<p>(The MIT License)</p>

<p>Copyright © 2009-2013 Brandon Mathis</p>

<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>

<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>

<p>THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>

<h4>If you want to be awesome.</h4>

<ul>
<li>Proudly display the &#8216;Powered by Octopress&#8217; credit in the footer.</li>
<li>Add your site to the Wiki so we can watch the community grow.</li>
</ul>

]]></content>
  </entry>
  
</feed>
