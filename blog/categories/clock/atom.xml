<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Clock | Linux Primer]]></title>
  <link href="http://datawolf.github.com/blog/categories/clock/atom.xml" rel="self"/>
  <link href="http://datawolf.github.com/"/>
  <updated>2015-06-22T22:03:42+08:00</updated>
  <id>http://datawolf.github.com/</id>
  <author>
    <name><![CDATA[datawolf]]></name>
    <email><![CDATA[datawolf@laoqinren.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux世界里的时间]]></title>
    <link href="http://datawolf.github.com/blog/2013/05/26/linuxshi-jie-li-de-shi-jian/"/>
    <updated>2013-05-26T20:33:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/05/26/linuxshi-jie-li-de-shi-jian</id>
    <content type="html"><![CDATA[<p>通常，操作系统可以使用三种方法来表示系统的当前时间与日期：</p>

<ol>
<li>简单的一种方法就是直接用一个64位的计数器来对<strong>时钟滴答</strong>进行计数。</li>
<li>第二种方法就是用一个32位计数器来对<strong>秒</strong>进行计数，同时还用一个32位的辅助计数器对时钟滴答计数，直至累积到一秒为止。因为23<sup>2超过136年，因此这种方法直至22世纪都可以让系统工作得很好。</sup></li>
<li>第三种方法也是按<strong>时钟滴答</strong>进行计数，但是是相对于系统启动以来的滴答次数，而不是相对于某个确定的外部时刻；当读外部后备时钟（如RTC）或用户输入实际时间时，根据当前的滴答次数计算系统当前时间。</li>
</ol>


<h2>基本概念</h2>

<p>首先，有必要明确一些Linux内核时钟驱动中的基本概念。</p>

<h3>时钟周期的频率</h3>

<p>时钟周期（clock cycle）的频率：<code>8253／8254 PIT</code>的本质就是对由晶体振荡器产生的
时钟周期进行计数，<strong>晶体振荡器在1秒时间内产生的时钟脉冲个数就是时钟周期的频率</strong>。</p>

<p>Linux用宏<code>CLOCK_TICK_RATE</code>来表示<code>8254 PIT</code>的输入时钟脉冲的频率,该宏定义在<code>arch/x86/include/asm/timex.h</code>头文件中：
``` c</p>

<pre><code>./arch/x86/include/asm/timex.h:8:#define CLOCK_TICK_RATE  PIT_TICK_RATE
./include/linux/timex.h:153:#define PIT_TICK_RATE 1193182ul
</code></pre>

<p>```</p>

<h3>时钟滴答</h3>

<p>时钟滴答（clock tick）：当PIT通道0的计数器减到0值时，它就在<code>IRQ0</code>上产生一次时钟中断，也即一次<strong>时钟滴答</strong>。PIT通道0的计数器的初始值决定了要过多少时钟周期才产生一次时钟中断，因此也就决定了一次时钟滴答的时间间隔长度。</p>

<h3>时钟滴答的频率</h3>

<p>时钟滴答的频率（HZ）：即<strong>1秒时间内PIT所产生的时钟滴答次数</strong>。类似地，这个值也是由PIT通道0的计数器初值决定的（反过来说，确定了时钟滴答的频率值后也就可以确定8254 PIT通道0的计数器初值）。</p>

<p>Linux内核用宏<code>HZ</code>来表示时钟滴答的频率，而且在不同的平台上<code>HZ</code>有不同的定义值。对于ALPHA和IA62平台HZ的值是1024，对于SPARC、MIPS、ARM和i386等平台<code>HZ</code>的值都是100。该宏在i386平台上的定义如下:
``` c</p>

<pre><code>#ifndef HZ 
#define HZ 100 
#endif 
</code></pre>

<p><code>``
根据</code>HZ`的值，我们也可以知道一次时钟滴答的具体时间间隔应该是（1000ms／HZ）＝10ms。</p>

<!-- more -->


<h3>时钟滴答的时间间隔</h3>

<p>时钟滴答的时间间隔：Linux用全局变量<code>tick</code>来表示时钟滴答的时间间隔长度，该变量定义在<code>kernel/timer.</code>c文件中，如下：
``` c</p>

<pre><code>long tick = (1000000 + HZ/2) / HZ; /* timer interrupt period */ 
</code></pre>

<p><code>``
</code>tick<code>变量的单位是**微妙**（μs），由于在不同平台上宏HZ的值会有所不同，因此方程式tick＝1000000÷HZ的结果可能会是个小数，因此将其进行四舍五入成一个整数，所以Linux将</code>tick<code>定义成（1000000＋HZ／2）／HZ，其中被除数表达式中的HZ／2的作用就是用来将</code>tick`值向上圆整成一个整型数。</p>

<p>另外，Linux还用宏<code>TICK_SIZE</code>来作为tick变量的引用别名（alias），其定义如下（<code>arch／i386/kernel/time.c</code>）：
``` c</p>

<pre><code>#define TICK_SIZE tick 
</code></pre>

<p>```</p>

<h3>宏LATCH</h3>

<p>宏LATCH：Linux用宏<code>LATCH</code>来定义<strong>要写到PIT通道0的计数器中的值</strong>，它表示PIT将每隔多少个时钟周期产生一次时钟中断。显然LATCH应该由下列公式计算：</p>

<pre><code>LATCH＝（1秒之内的时钟周期个数）÷（1秒之内的时钟中断次数）＝（CLOCK_TICK_RATE）÷（HZ） 
</code></pre>

<p>类似地，上述公式的结果可能会是个小数，应该对其进行四舍五入。所以，Linux将<code>LATCH</code>定义为（<code>/include/linux/jiffies.h</code>）：
``` c</p>

<pre><code>./include/linux/jiffies.h:54:/* LATCH is used in the interval timer and ftape setup. */
./include/linux/jiffies.h:55:#define LATCH ((CLOCK_TICK_RATE + HZ/2) / HZ)  /* For divider */
</code></pre>

<p><code>``
类似地，被除数表达式中的HZ／2也是用来将</code>LATCH`向上圆整成一个整数。</p>

<h2>时间的内核数据结构</h2>

<p>作为一种UNIX类操作系统，Linux内核显然采用本文开始所述的第三种方法来表示系统的当前时间。Linux内核在表示系统当前时间时用到了三个重要的数据结构：</p>

<h3>全局变量jiffies</h3>

<p><strong>全局变量jiffies</strong>：这是一个32位的无符号整数，用来表示自内核上一次启动以来的时钟滴答次数。每发生一次时钟滴答，内核的时钟中断处理函数<code>timer_interrupt()</code>都要将该全局变量<code>jiffies</code>加1。</p>

<p>该变量定义在<code>include/linux/jiffies.h</code>源文件中，如下所示：
``` c</p>

<pre><code>  /*
   * The 64-bit value is not atomic - you MUST NOT read it
   * without sampling the sequence number in jiffies_lock.
   * get_jiffies_64() will do this for you as appropriate.
   */
  extern u64 __jiffy_data jiffies_64;
  extern unsigned long volatile __jiffy_data jiffies;
</code></pre>

<p><code>``
C语言限定符</code>volatile<code>表示</code>jiffies`是一个易该变的变量，因此编译器将使对该变量的访问从不通过CPU内部cache来进行。</p>

<p><code>__jiffy_data</code>的定义如下：
``` c</p>

<pre><code>  /* some arch's have a small-data section that can be accessed register-relative
   * but that can only take up to, say, 4-byte variables. jiffies being part of
   * an 8-byte variable may not be correctly accessed unless we force the issue
   */
  #define __jiffy_data  __attribute__((section(".data")))
</code></pre>

<p>```</p>

<h3>全局变量xtime</h3>

<p><strong>全局变量xtime</strong>：它是一个<code>timeval</code>结构类型的变量，用来表示当前时间距UNIX时间基准
1970－01－01 00：00：00的<strong>相对秒数值</strong>。结构<code>timeval</code>是Linux内核表示时间的一种格式
（Linux内核对时间的表示有多种格式，每种格式都有不同的时间精度），其时间精度是<strong>微秒</strong>。
该结构是内核表示时间时最常用的一种格式，它定义在头文件<code>include/uapi/linux/time.h</code>中，
如下所示：
``` c</p>

<pre><code>struct timeval {
        __kernel_time_t    tv_sec; /* seconds */
        __kernel_suseconds_t    tv_usec;/* microseconds */
  };
</code></pre>

<p><code>
`__kernel_time_t`的定义如下：
</code> c</p>

<pre><code>typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_long_t;
</code></pre>

<p>```</p>

<p><code>__kernel_suseconds_t</code>的定义如下：
``` c</p>

<pre><code>#ifndef __kernel_suseconds_t
  typedef __kernel_long_t         __kernel_suseconds_t;
#endif
typedef long long __kernel_long_t;
</code></pre>

<p><code>
其中，成员`tv_sec`表示当前时间距UNIX时间基准的秒数值，而成员`tv_usec`则表示一秒之内的
微秒值，且`1000000&gt;tv_usec&gt;＝0`。Linux内核通过`timeval`结构类型的全局变量`xtime`来维持当前时间，该变量定义在`kernel/timer.c`文件中，如下所示：
</code> c</p>

<pre><code>/* The current time */ 
volatile struct timeval xtime __attribute__ ((aligned (16))); 
</code></pre>

<p>```</p>

<h3>全局变量sys_tz</h3>

<p><strong>全局变量sys_tz</strong>：它是一个<code>timezone</code>结构类型的全局变量，表示系统当前的时区信息。结构类型<code>timezone</code>定义在<code>include/uapi/linux/time.h</code>头文件中，如下所示:
``` c</p>

<pre><code>  struct timezone {
          int     tz_minuteswest; /* minutes west of Greenwich */
          int     tz_dsttime;     /* type of dst correction */
  };
</code></pre>

<p><code>
基于上述结构，Linux在`kernel/time.c`文件中定义了全局变量`sys_tz`表示系统当前所处的时区信息，如下所示：
</code> c</p>

<pre><code>  /*
   * The timezone where the local system is located.  Used as a default by some
   * programs who obtain this value by using gettimeofday.
   */
  struct timezone sys_tz;
</code></pre>

<p>````</p>
]]></content>
  </entry>
  
</feed>
