<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Linux Primer]]></title>
  <link href="http://datawolf.github.com/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://datawolf.github.com/"/>
  <updated>2015-06-22T22:03:42+08:00</updated>
  <id>http://datawolf.github.com/</id>
  <author>
    <name><![CDATA[datawolf]]></name>
    <email><![CDATA[datawolf@laoqinren.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[which 命令分析]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/14/which-ming-ling-fen-xi/"/>
    <updated>2013-04-14T17:03:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/14/which-ming-ling-fen-xi</id>
    <content type="html"><![CDATA[<h2>环境</h2>

<p>Linux 3.2.0-40-generic #64-Ubuntu SMP Mon Mar 25 21:22:10 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</p>

<h3>which 命令的位置</h3>

<p><code>bash
datawolf@datawolf-ThinkPad-Edge:~$ which -a which
/usr/bin/which
/bin/which
</code></p>

<h3>分析两个which文件的类型</h3>

<p>通过以下shell命令可以看出，<code>/usr/bin/which</code>是一个指向<code>/bin/which</code>的符号链接。而<code>/bin/which</code>是一个shell脚本。
<code>bash
datawolf@datawolf-ThinkPad-Edge:~$ ls -al  /usr/bin/which /bin/which
-rwxr-xr-x 1 root root 946 Mar 30  2012 /bin/which
lrwxrwxrwx 1 root root  10 Feb 21 16:23 /usr/bin/which -&gt; /bin/which
datawolf@datawolf-ThinkPad-Edge:~$ file /usr/bin/which
/usr/bin/which: symbolic link to `/bin/which'
datawolf@datawolf-ThinkPad-Edge:~$ file /bin/which
/bin/which: POSIX shell script, ASCII text executable
</code></p>

<!-- more -->


<h3>/bin/which 文件分析</h3>

<p><strong>which</strong>命令的原理：该命令在系统<code>$PATH</code>环境变量指向的目录中，寻找是否有指定的可执行的命令。
其用发如下：
<code>bash
$ which -a ping # 寻找所有的ping命令在系统中的路径位置
$ which ping # 寻找第一个ping命令在系统中的路径位置
</code>
<strong>which</strong>命令的源代码如下：
``` bash</p>

<h1>!/bin/sh</h1>

<h1>-e 如果命令带非0返回值，立即退出</h1>

<h1>-f 禁止带扩展名的路径</h1>

<p>set -ef</p>

<h1>$KSH_VERSION变量表示ksh的版本</h1>

<p>if test -n "$KSH_VERSION"; then</p>

<pre><code>puts() {
    print -r -- "$*"
}
</code></pre>

<p>else</p>

<pre><code>puts() {
    printf '%s\n' "$*"
}
</code></pre>

<p>fi</p>

<p>ALLMATCHES=0</p>

<h1>查找是否有选项-a</h1>

<h1>如果有选项-a，打印所有匹配的命令，否则打印第一个匹配的命令</h1>

<p>while getopts a whichopts
do</p>

<pre><code>    case "$whichopts" in
            a) ALLMATCHES=1 ;;
            ?) puts "Usage: $0 [-a] args"; exit 2 ;;
    esac
</code></pre>

<p>done</p>

<h1>shift n 表示将原来的位置参数左移n位。</h1>

<h1>$OPTIND 代表下一个待处理的参数的索引</h1>

<p>shift $(($OPTIND - 1))</p>

<h1>$#标表示参数的个数</h1>

<p>if [ "$#" -eq 0 ]; then
 ALLRET=1
else
 ALLRET=0
fi
case $PATH in</p>

<pre><code>(*[!:]:) PATH="$PATH:" ;;
</code></pre>

<p>esac</p>

<h1>$@代表输入的所有的命令行参数</h1>

<h1>$IFS表示bash内部的域分割符。默认值为空格</h1>

<h1>[-f "filename"] 判断是否是一个文件</h1>

<h1>[-x "filename"] 判断文件是否具有可执行权限</h1>

<h1>[-z "str"] 判断字符串长度是否为0</h1>

<p>#</p>

<p>for PROGRAM in "$@"; do
 RET=1
 IFS_SAVE="$IFS"
 IFS=:</p>

<h1>该程序首先判断具有全部路径的命令是否存在，比如这样使用： which /usr/bin/ls</h1>

<h1>如果当使用如下时： which ls 该程序将在系统$PATH的路径下寻找相应的程序。</h1>

<p> case $PROGRAM in
  <em>/</em>)
   if [ -f "$PROGRAM" ] &amp;&amp; [ -x "$PROGRAM" ]; then</p>

<pre><code>puts "$PROGRAM"
RET=0
</code></pre>

<p>   fi
   ;;
  *)
   for ELEMENT in $PATH; do</p>

<pre><code>if [ -z "$ELEMENT" ]; then
 ELEMENT=.
fi
if [ -f "$ELEMENT/$PROGRAM" ] &amp;&amp; [ -x "$ELEMENT/$PROGRAM" ]; then
 puts "$ELEMENT/$PROGRAM"
 RET=0
 [ "$ALLMATCHES" -eq 1 ] || break
fi
</code></pre>

<p>   done
   ;;
 esac
 IFS="$IFS_SAVE"
 if [ "$RET" -ne 0 ]; then
  ALLRET=1
 fi
done</p>

<p>exit "$ALLRET"</p>

<p>```</p>

<h3>CentOS 中的which命令</h3>

<h4>环境</h4>

<p>Linux 2.6.32-220.17.1.el6.x86_64 #1 SMP Wed May 16 00:01:37 BST 2012 x86_64 x86_64 x86_64 GNU/Linux</p>

<p>which - shows the full path of (shell) commands</p>

<p>Which takes one or more arguments. For each of its arguments it prints to stdout the full path of the executables that would have been executed when this argument had been entered at the shell prompt. It does this by searching for an executable or script in the directories listed in the environment variable PATH using the same algorithm as bash(1)</p>

<h4>在CentOS下，which是c语言写的</h4>

<p>``` bash
[wanglong@wanglong ~]$ which -a which
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'</p>

<pre><code>/usr/bin/which
</code></pre>

<p>/usr/bin/which
[wanglong@wanglong ~]$ file /usr/bin/which
/usr/bin/which: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.18, stripped
[wanglong@wanglong ~]$ ldd /usr/bin/which</p>

<pre><code>linux-vdso.so.1 =&gt;  (0x00007fff74fff000)
libc.so.6 =&gt; /lib64/libc.so.6 (0x0000003250400000)
/lib64/ld-linux-x86-64.so.2 (0x0000003250000000)
</code></pre>

<p>[wanglong@wanglong ~]$
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动备份网站和数据库的shell脚本]]></title>
    <link href="http://datawolf.github.com/blog/2013/04/06/zi-dong-bei-fen-wang-zhan-he-shu-ju-ku-de-shelljiao-ben/"/>
    <updated>2013-04-06T16:05:00+08:00</updated>
    <id>http://datawolf.github.com/blog/2013/04/06/zi-dong-bei-fen-wang-zhan-he-shu-ju-ku-de-shelljiao-ben</id>
    <content type="html"><![CDATA[<h2>备份网站内容</h2>

<p>我的网站是用xampp集成环境搭建的。为了方便迁移和备份数据。使用如下脚本对我网站内容进行备份。其中，<code>BACKUPDIR</code>指定备份文件的存储位置。
每一次备份的文件都用备份时系统的时间来进行唯一的命名，获取实际使用命令<code>date -I</code>。
``` sh</p>

<h1>!/bin/bash</h1>

<h1>where to store the backup file</h1>

<p>BACKUPDIR="/home/wanglong"</p>

<p>DATE=<code>date -I</code>
[ ! -d $BACKUPDIR ] &amp;&amp; mkdir -p $BACKUPDIR
cd /opt/lampp
tar  zcf $BACKUPDIR/htdocs.$DATE.tar.gz htdocs
```</p>

<h2>备份mysql数据库</h2>

<p>备份数据库前，需要指定一下shell变量，包括mysql数据库的用户名、密码、运行数据库的主机和数据库相关命令的位置。
<code>sh
MYUSER="user"
MYPASS="password"
HOST="localhost"
BACKUPDIR="/home/wanglong"
MYSQL="/opt/lampp/bin/mysql"
MYSQL_DUMP="/opt/lampp/bin/mysqldump"
</code>
完整shell脚本如下，首先将所有的数据库作为一个整体进行备份，然后对每一个数据库分别进行了备份。
``` sh</p>

<h1>!/bin/bash</h1>

<p>MYUSER="user"
MYPASS="password"
HOST="localhost"
BACKUPDIR="/home/wanglong"
MYSQL="/opt/lampp/bin/mysql"
MYSQL_DUMP="/opt/lampp/bin/mysqldump"
DATE=<code>date -I</code></p>

<p>[ ! -d $BACKUPDIR/$DATE ] &amp;&amp; mkdir -p $BACKUPDIR/$DATE</p>

<h1>backup all databases in a file</h1>

<p>$MYSQL_DUMP -u$MYUSER -p$MYPASS -h$HOST  --all-databases > $BACKUPDIR/$DATE/all-databases.sql</p>

<h1>backup each database in separate file</h1>

<p>DBS=<code>$MYSQL -u$MYUSER -p$MYPASS -Bse "show databases"|grep -v "information_schema" | grep -v "performance_schema"|grep -v "Database"</code>
for db_name in $DBS
  do</p>

<pre><code>$MYSQL_DUMP  -u$MYUSER -p$MYPASS -h$HOST  $db_name  &gt; $BACKUPDIR/$DATE/$db_name.sql
</code></pre>

<p>  done</p>

<p>cd $BACKUPDIR
tar zcf mysql.$DATE.tar.gz $DATE &amp;&amp; rm -rf $BACKUPDIR/$DATE
```</p>

<h2>自动执行脚本</h2>

<p>计划每周自动备份一次网站和数据库，所以需要将上述脚本拷贝到目录<code>/etc/cron.weekly/</code>中。</p>
]]></content>
  </entry>
  
</feed>
